<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Justin on WEB</title>
  
  <link href="/MyBlog/atom.xml" rel="self"/>
  
  <link href="https://jgw96.github.io/MyBlog/"/>
  <updated>2017-01-13T03:06:15.000Z</updated>
  <id>https://jgw96.github.io/MyBlog/</id>
  
  <author>
    <name>Justin Willis</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Device Api&#39;s and why they matter for a PWA</title>
    <link href="https://jgw96.github.io/MyBlog/2017/01/12/DeviceApis/"/>
    <id>https://jgw96.github.io/MyBlog/2017/01/12/DeviceApis/</id>
    <published>2017-01-12T08:06:56.000Z</published>
    <updated>2017-01-13T03:06:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Ever wondered if you could make a device vibrate, or access the camera, or even access the native share dialog for a device from your PWA?<br>Sure, if you make a regular Ionic 2 app, use Ionic Native and deploy this to a device then yeah, you can have access to all these things<br>but what if you are making a PWA? Well the cool thing is you <em>can</em> access all these things with all the new device api’s that are now supported<br>in browsers. You can now swing your magic wand and give your PWA even more of that “native” feel by accessing the capabilities of the users device<br>all from plain JavaScript!</p>
<h4 id="Why-would-I-want-to-access-these-native-capabilities"><a href="#Why-would-I-want-to-access-these-native-capabilities" class="headerlink" title="Why would I want to access these native capabilities?"></a>Why would I want to access these native capabilities?</h4><p>To answer this question we first have to take a look at exactly what a PWA is. If you dont know already a PWA is a web app built with<br>modern web technologies such as service workers, web manifests and more that give a fast, app-like experience in the browser. And, if the user decides<br>they like your PWA and visit it enough times then they will get a prompt to add it to their homescreen on their device which puts your PWA<br>right alongside all the native apps on their device! Now the two key things here are <em>app-like</em> and <em>right alongside all the native apps on their<br>device</em>. When your PWA sits right alongside native apps and launches just like a native app (no browser chrome) a user has the expectation that<br>your PWA will act and feel just like a native app. A key part of this is being able to access the same device functionality that a native app<br>can access. A good example of this is sharing something on Android. There is a standard way that sharing happens on Android and all native apps will<br>use this same api for sharing something which means that a user will get used to this way of sharing something from their device. Now, if they are using<br>your PWA, hit a share button and are all the sudden faced with an unfamiliar sharing ui then it can cause confusion, therefore causing the user<br>to potentially not want to use your PWA.</p>
<h4 id="Ok-so-now-I-want-to-use-these-api’s-but-what-is-actually-available"><a href="#Ok-so-now-I-want-to-use-these-api’s-but-what-is-actually-available" class="headerlink" title="Ok so now I want to use these api’s, but what is actually available?"></a>Ok so now I want to use these api’s, but what is actually available?</h4><p>The cool thing about the modern web is that it is immensely powerful and has more access to your device than you may think. Here is a short list<br>of some of what is available out there now: <em>disclaimer - not all of these api’s are widely supported yet but are standardized and should be coming soon</em></p>
<ul>
<li>Vibration api - <a href="http://caniuse.com/#feat=vibration" target="_blank" rel="external">http://caniuse.com/#feat=vibration</a></li>
<li>GetUserMedia api - <a href="http://caniuse.com/#search=getUserMedia" target="_blank" rel="external">http://caniuse.com/#search=getUserMedia</a></li>
<li>Web Share api - Only available as an <a href="https://github.com/jpchase/OriginTrials/blob/gh-pages/developer-guide.md" target="_blank" rel="external">origin trial</a> in Chrome at the moment</li>
<li>Battery Status api - <a href="http://caniuse.com/#feat=battery-status" target="_blank" rel="external">http://caniuse.com/#feat=battery-status</a></li>
<li>Push messages api - <a href="http://caniuse.com/#search=push" target="_blank" rel="external">http://caniuse.com/#search=push</a></li>
</ul>
<p>For a comprehensive list feel free to check out <a href="https://whatwebcando.today/" target="_blank" rel="external">What web can do today</a> but these are some of what I personally think<br>are the coolest device api’s available at the moment. As you can see the browser support is pretty decent for most of these api’s. Happily, edge is in the<br>progress of implementing most of these (understandable as they are still a relatively new browser) which just leaves Safari not having good support, I have<br>hope that Safari will implement these api’s soon though!</p>
<h4 id="This-is-exciting-Have-any-examples-available-I-can-use"><a href="#This-is-exciting-Have-any-examples-available-I-can-use" class="headerlink" title="This is exciting! Have any examples available I can use?"></a>This is exciting! Have any examples available I can use?</h4><p>Over the coming weeks I hope to create a few PWA’s that use these api’s and open source them on Github for you to use as examples!</p>
<p>Thanks for checking out what is only my second blog post on this blog! I have a special blog post planned next that I think you will want to see!<br>Think its possible to create a full blown camera app only out of web technologies? It definitely is and in my next post I will go over how I did this!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ever wondered if you could make a device vibrate, or access the camera, or even access the native share dialog for a device from your PWA
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>requestIdleCallback, Let the browser work for you!</title>
    <link href="https://jgw96.github.io/MyBlog/2017/01/11/RequestIdleCallback/"/>
    <id>https://jgw96.github.io/MyBlog/2017/01/11/RequestIdleCallback/</id>
    <published>2017-01-12T01:18:18.000Z</published>
    <updated>2017-01-12T03:58:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>By now you have probably heard of RequestAnimationFrame, if not the tldr is that RequestAnimationFrame lets the browser time<br>animations for you to line up perfectly with the painting process, meaning you get more performant animations. This is a perfect example<br>letting the platform work for you, and therefore gaining better performance since the browser can be smart about the whole thing. Since your<br>PWA’s are going to be running mainly in a mobile environment, where computation resources are very limited, the more we can let the<br>browser help us be fast, the better off we will be. A newer example of an api that lets the browser help us that you may not have heard of yet is<br><code>requestIdleCallback</code>. Lets dive into this new api and see how it can help make your next PWA lightning fast!</p>
<h4 id="What-exactly-is-requestIdleCallback"><a href="#What-exactly-is-requestIdleCallback" class="headerlink" title="What exactly is requestIdleCallback?"></a>What exactly is requestIdleCallback?</h4><p><code>requestIdleCallback</code> is a new api that lets the browser execute code when it is idle. In this case idle means that the browser is currently<br>at the end of a frame, has some free time and that the user is not interacting with the app in any way. <code>requestIdleCallback</code> will only fire<br>the function passed to it when these two requirements are met, which does mean that if it does not have any idle time it may not actually<br>execute the function passed to it. While this may sound like a bad thing, <em>Hey I wrote this code, execute it damnit</em> , <code>requestIdleCallback</code><br>has some handy features that we will see below to let you ensure that a bit of code is executed if it has to be.</p>
<h4 id="Use-Cases"><a href="#Use-Cases" class="headerlink" title="Use Cases"></a>Use Cases</h4><p>Before we go into examples of how to use <code>requestIdleCallback</code> I thought I would introduce some instances where this new api comes in handy.<br>First, most big sites and PWA’s use analytics of some kind so that the developer of that site can know how their users use this app. Now,<br>imagine if your on a mobile device (and remember, not everyone has that brand new Google Pixel or Iphone 7), click on a menu and boom,<br>that analaytics service kicks off some javascript to send the event to the analytics server. What happens when thread blocking JS<br>runs when the browser is trying to animate? Jank, and sometimes lots of it. Now imagine that the developer used <code>requestIdleCallback</code> to<br>send that analytics request. With <code>requestIdleCallback</code> the browser would have waited until it was idle (no painting or animating) and then<br>would have sent the analytics request while it was idle. Now we have a jank free experience and still get to send those analytics! Second,<br>imagine that we have a PWA that processes audio data using the Web Audio api. On mobile devices this can potentially be heavy on the<br>cpu and do some thread locking. If we timed this work using <code>requestIdleCallback</code> the browser could then help us do this heavy work while<br>the browser is idle and keep our PWA silky smooth!</p>
<h4 id="One-last-thing-before-we-use-this-api"><a href="#One-last-thing-before-we-use-this-api" class="headerlink" title="One last thing before we use this api"></a>One last thing before we use this api</h4><p>As with all newer api’s we should always remember to fall back gracefully to older ways of doing things on browsers that do not yet support<br>certain api’s. Current browser support for <code>requestIdleCallback</code> is as follows:</p>
<ul>
<li>Chrome: Fully supported, available in Chrome since Chrome 47 (current stable version of Chrome is Chrome 55)</li>
<li>Firefox: Coming in Firefox 52 (current stable version of Firefox is Firefox 50)</li>
<li>Edge: <a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/status/requestidlecallback/" target="_blank" rel="external">Under consideration</a></li>
<li>Opera: Fully supported as of Opera 42 (current stable version of Opera is Opera 42)</li>
<li>Safari: Not supported, unfortunately could not find any info on when Safari plans to support <code>requestIdleCallback</code></li>
</ul>
<p>To test for <code>requestIdleCallback</code> suppport in your code and fall back gracefully for browsers with no support you can use this<br>pattern.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="string">'requestIdleCallback'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</div><div class="line">  requestIdleCallback(doHeavyComputation)</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// No support so lets just execute our code</span></div><div class="line">  doHeavyComputation()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>With this code we will use <code>requestIdleCallback</code> when it is available and simply fall back to just executing our code when<br>there is no support for it in the browser our app is running on.</p>
<h4 id="Ok-so-how-do-I-use-this-thing"><a href="#Ok-so-how-do-I-use-this-thing" class="headerlink" title="Ok, so how do I use this thing?"></a>Ok, so how do I use this thing?</h4><p>If you have ever used RequestAnimationFrame then the <code>requestIdleCallback</code> api should feel pretty familiar to you. To use <code>requestIdleCallback</code><br>the first step is to pass it a callback. Our callback should be the function that we would like to schedule for idle time, <code>doHeavyComputation</code> in this example.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">requestIdleCallback(doHeavyComputation);</div></pre></td></tr></table></figure>
<p>In a nutshell this is all you really need to use <code>requestIdleCallback</code>, but this usage does not guarantee that your code will be executed<br>and also does not let you know how much time is actually available for that specific call to <code>requestIdleCallback</code> so lets expand on this<br>example a little. The function that gets called by <code>requestIdleCallback</code> will receive a <code>deadline</code> object as a paramater. This <code>deadline</code><br>object offers some pretty handy information.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// function were passing to requestIdleCallback</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doHeavyComputation</span>(<span class="params">deadline</span>) </span>&#123;</div><div class="line">  <span class="keyword">while</span> (deadline.timeRemaining &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="comment">// do work while we have time</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20000000</span>; i++) &#123;</div><div class="line">      amazinglyHugeArray.push(&#123;<span class="attr">fact</span>: <span class="string">'JS is cool'</span>&#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// we ran out of time, schedule again</span></div><div class="line">  requestIdleCallback(doHeavyComputation)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>In this example we are using the <code>deadline</code> object to check if we have time left. While we do have free time we will do our heavy computation.<br>The cool thing here is that if we run out of time doing this work then we can simply schedule another <code>requestIdleCallback</code> and try again next<br>time the browser is idle. Now, say we want to ensure that some code will be ran even if <code>requestIdleCallback</code> runs out of time. <code>requestIdleCallback</code><br>takes a second paramater which lets us set a timeout. This forces the browser to finish executing our code by the time the timeout is reached. Now<br>before I even show an example of this I would like to stress that you should only do this if you <em>really</em> <em>really</em> need to. The whole point<br>of using <code>requestIdleCallback</code> is to schedule execution of code while the browser is idle so that we do not jank our PWA and it is definitely<br>possible that when the timeout is reached the browser may still be busy, which means that executing our code may jank the world. So now that<br>you are thoroughly warned about releasing the jank monster lets see an example of timeout in action.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">requestIdleCallback(doHeavyComputation, &#123; <span class="attr">timeout</span>: <span class="number">3000</span> &#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doHeavyComputation</span>(<span class="params">deadline</span>) </span>&#123;</div><div class="line">  <span class="keyword">while</span> (deadline.timeRemaining &gt; <span class="number">0</span> || deadline.didTimeout) &#123;</div><div class="line">    <span class="comment">// do work while we have time</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20000000</span>; i++) &#123;</div><div class="line">      amazinglyHugeArray.push(&#123;<span class="attr">fact</span>: <span class="string">'JS is cool'</span>&#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>As you can see here, we are now also checking for <code>deadline.didTimeout</code>. <code>didTimeout</code> will be <code>true</code> when our timeout has been reached which means<br>that even though the browser has ran out of idle time we are still going to execute our code. Again, this can release the jank monster so be careful.</p>
<h4 id="What-does-this-have-to-do-with-my-PWA"><a href="#What-does-this-have-to-do-with-my-PWA" class="headerlink" title="What does this have to do with my PWA ?"></a>What does this have to do with my PWA ?</h4><p>One of the big “selling points” of PWA’s is that they are able to be very light on resources and give an awesome experience on even the lowest of low end devices.<br>The problem here is even if we have done everything else that a good PWA should do perf wise (fast load time, cache resources for even faster load time next load etc etc),<br>if we execute javascript while the app is animating then we give our user a janky, slow experience, and who likes jank and slowness right? By taking advantage of perf oriented<br>API’s like like <code>requestIdleCallback</code> we can let the platform our PWA’s all run on, the browser, help us succeed in our perf goals!</p>
<p>Hope you enjoyed this post! Make sure to tune in next time to learn about devices api’s and why they are important for PWA’s!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;By now you have probably heard of RequestAnimationFrame, if not the tldr is that RequestAnimationFrame lets the browser time&lt;br&gt;animation
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Welcome!</title>
    <link href="https://jgw96.github.io/MyBlog/2017/01/02/Started/"/>
    <id>https://jgw96.github.io/MyBlog/2017/01/02/Started/</id>
    <published>2017-01-02T21:28:36.000Z</published>
    <updated>2017-01-02T21:42:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Plans-for-this-year"><a href="#Plans-for-this-year" class="headerlink" title="Plans for this year"></a>Plans for this year</h3><p>Hey everyone! So as you can see, one of the keys to my plan this year is to start a blog!<br>One of the things I love the most at the moment is explaining PWA’s, the technology behind them and then<br>need for them, and helping people build those PWA’s with <a href="http://ionicframework.com/" target="_blank" rel="external">Ionic</a>! The main outlet for this going forward is hopefully going<br>to be this blog, along with my <a href="https://twitter.com/Justinwillis96" target="_blank" rel="external">Twitter</a> of course.</p>
<p>My other plans for this year include contributing more to different web projects on Github. The open source web community is amazing,<br>I have seen this first hand plenty of times while working at Ionic, and I want to contribute back to all these projects that help<br>not only Ionic be great, but the web become <em>the</em> platform for people to build badass stuff on.</p>
<p>I plan to release content on this blog often, and I hope you enjoy all the content end up posting. Happy New Years everyone!</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Plans-for-this-year&quot;&gt;&lt;a href=&quot;#Plans-for-this-year&quot; class=&quot;headerlink&quot; title=&quot;Plans for this year&quot;&gt;&lt;/a&gt;Plans for this year&lt;/h3&gt;&lt;p&gt;He
    
    </summary>
    
    
  </entry>
  
</feed>
